searchState.loadedDescShard("starry_api", 0, "check if a path is mounted\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMount a fatfs device\nWrapper for <code>sockaddr</code>. Adapted from …\nGet file metadata by <code>fd</code> and write into <code>statbuf</code>.\nThe ioctl() system call manipulates the underlying device …\ncreate a link from new_path to old_path old_path: old file …\nGet the metadata of the symbolic link and write into <code>buf</code>.\nSleep some nanoseconds\nOpen a file by <code>filename</code> and insert it into the file …\nOpen or create a file. fd: file descriptor filename: file …\nRead data from the file indicated by <code>fd</code>.\nTo set the clear_child_tid field in the task extended data.\nGet the file metadata by <code>path</code> and write into <code>statbuf</code>.\nremove link of specific file (can be used to delete file) …\nWrite data to the file indicated by <code>fd</code>.\nunmount a fatfs device\nDirectory wrapper for <code>axfs::fops::Directory</code>.\nWrapper struct for the namespace resource [<code>FD_TABLE</code>]\nFile wrapper for <code>axfs::fops::File</code>.\nAdd a file to the file descriptor table.\nClose a file by <code>fd</code>.\nReturn a copy of the inner table.\nDereference the resource automatically, according whether …\nDereference the resource from the given namespace.\nDereference the resource from the global namespace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a file-like object by <code>fd</code>.\nGet the inner node of the file.\nGet the inner node of the directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the last directory entry.\nGet the path of the file.\nGet the path of the directory.\n一个规范化的文件路径表示\nA global hardlink manager\nA manager for hardlinks\n错误类型\n返回底层路径的字符串切片\n返回此路径组件的迭代器\n创建链接 如果目标路径不存在，则返回 …\n判断此路径是否以给定后缀路径结尾\nWhether the path exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n判断是否为目录（以 ‘/’ 结尾）\n判断是否为常规文件（不以 ‘/’ 结尾）\n判断是否为根目录\n将此路径与相对路径组件连接\n返回文件名或目录名组件\n从路径字符串创建一个新的 <code>FilePath</code>…\n返回父目录路径\n移除链接 链接数量为零 或 没有链接时， …\n判断此路径是否以给定前缀路径开头\nAn immutable pointer to user space memory.\nA pointer to user space memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the pointer as <code>&amp;str</code>, validating the memory region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA type that can hold any kind of socket address, as a safe …\nReturns the length of the encoded sockaddr.\nGets the initialized part of the storage as bytes.\nGets the address family of this socket address.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a socket address from reading from <code>ptr</code>, which …\nA helper trait for converting from and to <code>TimeValue</code>.\nConverts from <code>TimeValue</code>.\nConverts to <code>TimeValue</code>.")